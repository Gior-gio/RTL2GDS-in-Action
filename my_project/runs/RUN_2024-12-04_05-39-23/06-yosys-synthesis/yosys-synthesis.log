
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.47 (git sha1 647d61dd9, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

1. Executing Liberty frontend: /foss/pdks/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/foss/designs/RTL2GDS-in-Action/my_project/runs/RUN_2024-12-04_05-39-23/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v
Parsing SystemVerilog input from `/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v' to AST representation.
Storing AST representation for module `$abstract\my_project'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\my_project'.
Generating RTLIL representation for module `\my_project'.

4.1. Analyzing design hierarchy..
Top module:  \my_project

4.2. Analyzing design hierarchy..
Top module:  \my_project
Removing unused module `$abstract\my_project'.
Removed 1 unused modules.
Renaming module my_project to my_project.

5. Generating Graphviz representation of design.
Writing dot description to `/foss/designs/RTL2GDS-in-Action/my_project/runs/RUN_2024-12-04_05-39-23/06-yosys-synthesis/hierarchy.dot'.
Dumping module my_project to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \my_project

7.2. Analyzing design hierarchy..
Top module:  \my_project
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2 in module my_project.
Marked 1 switch rules as full_case in process $proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:34$1 in module my_project.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2'.
     1/2: $0\eoc[0:0]
     2/2: $0\B[2:0]
Creating decoders for process `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:34$1'.
     1/1: $1\Bx[2:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\my_project.\Bx' from process `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:34$1'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\my_project.\B' using process `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\my_project.\eoc' using process `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2'.
  created $dff cell `$procdff$19' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2'.
Removing empty process `my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:48$2'.
Found and cleaned up 1 empty switch in `\my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:34$1'.
Removing empty process `my_project.$proc$/foss/designs/RTL2GDS-in-Action/my_project/verilog/Decoder.v:34$1'.
Cleaned up 2 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module my_project...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_project.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking my_project.B as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_project.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$18 ($dff) from module my_project (D = \Bx, Q = \B, rval = 3'000).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_project.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 7) from port B of cell my_project.$procmux$12_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell my_project.$procmux$13_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell my_project.$procmux$14_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell my_project.$procmux$15_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell my_project.$procmux$16_CMP0 ($eq).
Removed top 6 bits (of 7) from port B of cell my_project.$procmux$17_CMP0 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module my_project:
  created 0 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_project.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.
<suppressed ~1 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_project..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_project.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_project'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_project..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_project.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /foss/tools/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
